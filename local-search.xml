<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从一次依赖下载失败理解npm、yarn install策略</title>
    <link href="/2023/08/03/frontEnd/%E4%BB%8E%E4%B8%80%E6%AC%A1%E4%BE%9D%E8%B5%96%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5%E7%90%86%E8%A7%A3npm%E3%80%81yarn%20install%E7%AD%96%E7%95%A5/"/>
    <url>/2023/08/03/frontEnd/%E4%BB%8E%E4%B8%80%E6%AC%A1%E4%BE%9D%E8%B5%96%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5%E7%90%86%E8%A7%A3npm%E3%80%81yarn%20install%E7%AD%96%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="从一次依赖下载失败理解npm、yarn-install策略"><a href="#从一次依赖下载失败理解npm、yarn-install策略" class="headerlink" title="从一次依赖下载失败理解npm、yarn install策略"></a>从一次依赖下载失败理解npm、yarn install策略</h1><h2 id="工具版本"><a href="#工具版本" class="headerlink" title="工具版本"></a>工具版本</h2><ul><li><code>nodejs</code>: v14.21.2</li><li><code>npm</code>: 6.14.17</li><li><code>yarn</code>: 1.22.19</li></ul><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>在一次删除<code>lock</code>文件重新下载依赖时，原本能够正常下载的依赖，现在却报错：<strong>node版本太低</strong>，导致下载依赖失败。特记录此次问题出现的原因。</p><p>假设现在项目有两个依赖 <code>marked</code>, <code>simplemde</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;marked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.3.19&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;simplemde&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^1.11.2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>而<code>simplemde</code> 内部又依赖了<code>marked</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  ...<br>  <span class="hljs-attr">&quot;marked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>发现<code>marked</code>有两个依赖版本<code>marked@*</code>, <code>marked@^0.3.19</code>, 也可以说项目添加<code>marked</code>依赖的目的就是为了控制<code>simplemde</code>中的依赖<code>marked</code>的版本。然而<code>yarn</code>在下载依赖的时候，将依赖中的子依赖也平铺开了下载。</p><p>此时：<code>marked@*</code> 指定的依赖版本是 <code>5.0.4</code> 而 自2023-05-02发布的<code>marked@5.0.0</code>开始， 对<code>node</code>的版本要求直接从 12 升至 18，导致<code>engines.node</code>版本校验不通过，下载报错。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// marked/v5.0.0/package.json</span><br><span class="hljs-punctuation">&#123;</span><br>  ...<br>  <span class="hljs-attr">&quot;engines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;node&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&gt;= 18&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="对比-npm-和-yarn-下载依赖"><a href="#对比-npm-和-yarn-下载依赖" class="headerlink" title="对比 npm 和 yarn 下载依赖"></a>对比 <code>npm</code> 和 <code>yarn</code> 下载依赖</h3><blockquote><p>通过<code>npm install</code>下载依赖 (npm version: 6.14.17)</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">...<br><span class="hljs-comment">// package-lock.json</span><br><span class="hljs-attr">&quot;marked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.3.19&quot;</span><span class="hljs-punctuation">,</span><br>    ...<br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;simplemde&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.11.2&quot;</span><span class="hljs-punctuation">,</span><br>    ...<br>    <span class="hljs-attr">&quot;requires&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    ...<br>    <span class="hljs-attr">&quot;marked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>...<br></code></pre></td></tr></table></figure><p>在<code>package-lock.json</code>中, 将<code>marked</code> 锁在 <code>version: 0.3.19</code></p><blockquote><p>通过 <code>yarn</code> 下载依赖 (yarn version: 1.22.19)</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// yarn.lock</span><br>...<br>marked@*<span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;5.0.4&quot;</span><br>  ...<br><br>marked@^<span class="hljs-number">0.3</span><span class="hljs-number">.19</span><span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;0.3.19&quot;</span><br>  ...<br><br>simplemde@^<span class="hljs-number">1.11</span><span class="hljs-number">.2</span><span class="hljs-punctuation">:</span><br>  version <span class="hljs-string">&quot;1.11.2&quot;</span><br>  ...<br>  dependencies<span class="hljs-punctuation">:</span><br>    ...<br>    marked <span class="hljs-string">&quot;*&quot;</span><br>...<br></code></pre></td></tr></table></figure><p><code>yarn.lock</code> 中确有两个<code>marked</code>依赖版本</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>而一开始在项目中指定<code>marked: ^0.3.19</code>也就是为了限制子依赖版本在<code>0.3.*</code>, 但是现在使用<code>yarn</code>下载会校验子依赖中的<code>marked@*</code>,导致下载中断, 但是使用<code>npm</code>下载却不会有这个问题。</p><p>虽然可以通过配置忽略版本校验，但是<strong>根本原因</strong>还是<code>yarn</code>重复校验下载了依赖。</p><h2 id="了解yarn的install流程"><a href="#了解yarn的install流程" class="headerlink" title="了解yarn的install流程"></a>了解<code>yarn</code>的<a href="https://yarnpkg.com/cli/install">install流程</a></h2><ul><li><code>Resolving packages</code>: 分析包的依赖关系及版本信息</li><li><code>Fetching packages</code>: 下载依赖项，存储到缓存中</li><li><code>Linking dependencies</code>: 将缓存中的包扁平化的安装到项目当中去</li><li><code>Building fresh packages</code>: 构建安装, 执行install阶段的scripts</li></ul><h3 id="测试校验"><a href="#测试校验" class="headerlink" title="测试校验"></a>测试校验</h3><ul><li>首先清空缓存</li></ul><p><code>yarn</code> 查看缓存路径：<code>yarn cache dir</code>, 清空缓存：<code>yarn cache clean --force</code></p><p><code>npm</code> 查看缓存路径：<code>npm config get cache</code>, 清空缓存：<code>npm cache clean --force</code></p><p>使用<code>yarn</code>下载，下载失败</p><p><img src="https://s1.ax1x.com/2023/08/03/pPiXFjH.png" alt="pPiXFjH.png"></p><p><img src="https://s1.ax1x.com/2023/08/03/pPiXAud.png" alt="pPiXAud.png"></p><blockquote><p>这里倒是可以通过忽略<code>engines</code>来通过下载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 忽略engines校验</span><br>yarn config <span class="hljs-built_in">set</span> ignore-engines <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="npm-install的过程发生了什么"><a href="#npm-install的过程发生了什么" class="headerlink" title="npm install的过程发生了什么"></a><code>npm install</code>的过程发生了什么</h2><p>当存在嵌套依赖和根级依赖冲突时，npm会根据以下规则来确定使用哪个依赖项：</p><ul><li>直接依赖优先： 根级依赖的优先级更高，它们将覆盖任何嵌套依赖中的相同包。</li><li>版本范围解析： 如果根级依赖和嵌套依赖都有对同一个包的依赖，并且它们的版本范围不冲突，npm会尽量满足两者的依赖关系，并使用符合两者版本要求的最高版本。</li><li>版本冲突解析： 如果根级依赖和嵌套依赖对同一个包有不兼容的版本要求，npm会尝试解决版本冲突，通常会选择满足所有依赖关系的最高版本，并通过符号链接或软链接来确保正确的依赖关系。</li></ul><h3 id="npm如何解决有版本冲突的依赖包"><a href="#npm如何解决有版本冲突的依赖包" class="headerlink" title="npm如何解决有版本冲突的依赖包"></a><code>npm</code>如何解决有版本冲突的依赖包</h3><p>现在我一个项目有两个依赖, <code>marked@^0.3.19</code>, 和 自己发的包 <code>avatar0813-pkg-t</code></p><p>其中<code>avatar0813-pkg-t</code>包依赖 <code>marked@^5.1.2</code></p><p><img src="https://s1.ax1x.com/2023/08/03/pPiOQmR.png" alt="pPiOQmR.png"></p><p><img src="https://s1.ax1x.com/2023/08/03/pPiOKX9.png" alt="pPiOKX9.png"></p><p><img src="https://s1.ax1x.com/2023/09/05/pPr2oJs.md.png" alt="pPr2oJs.md.png"></p><blockquote><p>问题: node_modules 中的<code>avatar0813-pkg-t</code> 包中间还有个node_modules</p></blockquote><p><strong>这正是npm install解决版本冲突策略，因为两个依赖<code>marked@^0.3.19</code>,<code>marked@^5.1.2</code>版本不兼容导致的，两个依赖都要，但是不能扁平化安装</strong></p><p><img src="https://s1.ax1x.com/2023/08/03/pPiOnl4.png" alt="pPiOnl4.png"></p><blockquote><p>如果将<code>avatar0813-pkg-t</code> 包中依赖改为的<code>marked@*</code>以兼容外部版本则不会出现这个问题。</p></blockquote><blockquote><p>亦或这指定<code>resolutions</code>依赖从而解决冲突</p></blockquote><p><img src="https://s1.ax1x.com/2023/08/03/pPixWGV.md.png" alt="pPixWGV.md.png"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eslint+prettier+lint-staged+husky项目管理</title>
    <link href="/2023/07/30/frontEnd/eslint-prettier-lint-staged-husky%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <url>/2023/07/30/frontEnd/eslint-prettier-lint-staged-husky%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-eslint-prettier-lint-staged-husky-做项目管理"><a href="#使用-eslint-prettier-lint-staged-husky-做项目管理" class="headerlink" title="使用 eslint,prettier,lint-staged,husky 做项目管理"></a>使用 <code>eslint</code>,<code>prettier</code>,<code>lint-staged</code>,<code>husky</code> 做项目管理</h1><h2 id="添加eslint，prettier做代码校验"><a href="#添加eslint，prettier做代码校验" class="headerlink" title="添加eslint，prettier做代码校验"></a>添加<code>eslint</code>，<code>prettier</code>做代码校验</h2><h3 id="下载依赖项"><a href="#下载依赖项" class="headerlink" title="下载依赖项"></a>下载依赖项</h3><p><code>pnpm install eslint prettier -D</code></p><h3 id="初始化eslint"><a href="#初始化eslint" class="headerlink" title="初始化eslint"></a>初始化<code>eslint</code></h3><p>运行命令：<code>pnpm init @eslint/config</code><br>cli会提醒让你选择你的配置项,生成配置文件。</p><p><a href="https://imgse.com/i/pPpRAl4"><img src="https://s1.ax1x.com/2023/07/30/pPpRAl4.png" alt="pPpRAl4.png"></a></p><h3 id="配置prettier"><a href="#配置prettier" class="headerlink" title="配置prettier"></a>配置<code>prettier</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">printWidth</span>: <span class="hljs-number">80</span>,<br>  <span class="hljs-attr">tabWidth</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">semi</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">true</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="设置忽略文件-eslintignore-cjs-prettierrc-cjs"><a href="#设置忽略文件-eslintignore-cjs-prettierrc-cjs" class="headerlink" title="设置忽略文件.eslintignore.cjs, .prettierrc.cjs"></a>设置忽略文件<code>.eslintignore.cjs</code>, <code>.prettierrc.cjs</code></h3><h3 id="为了更好的结合eslint-与-prettier-还需添加-eslint-config-prettier-eslint-plugin-prettier"><a href="#为了更好的结合eslint-与-prettier-还需添加-eslint-config-prettier-eslint-plugin-prettier" class="headerlink" title="为了更好的结合eslint 与 prettier 还需添加 eslint-config-prettier, eslint-plugin-prettier"></a>为了更好的结合<code>eslint</code> 与 <code>prettier</code> 还需添加 <code>eslint-config-prettier</code>, <code>eslint-plugin-prettier</code></h3><p><code>eslint-config-prettier</code>的作用是为了关闭<code>eslint</code>中不必要或可能与 <code>Prettier</code> 冲突的规则。<br>需要在<code>eslint</code>配置文件中添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  ...<br>  <span class="hljs-attr">extends</span>: [...ohterExtends,<span class="hljs-string">&#x27;prettier&#x27;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><p><code>eslint-plugin-config</code>的作用则是为了将<code>prettier</code>的校验转化为<code>eslint</code>的规则，从而做到编辑器的错误提示.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  ...<br>  <span class="hljs-attr">plugin</span>: [...otherPlugins,<span class="hljs-string">&#x27;prettier&#x27;</span>],<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&#x27;prettier/prettier&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="添加husky-lint-staged-规范commits"><a href="#添加husky-lint-staged-规范commits" class="headerlink" title="添加husky,lint-staged, 规范commits"></a>添加<code>husky</code>,<code>lint-staged</code>, 规范<code>commits</code></h2><p><code>husky</code>的作用是调用<code>git hook</code>做提交校验<br><code>lint-staged</code>的作用是只校验<code>git add .</code>的内容</p><h3 id="下载lint-staged"><a href="#下载lint-staged" class="headerlink" title="下载lint-staged"></a>下载<code>lint-staged</code></h3><p><code>pnpm install -D lint-staged</code></p><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br><span class="hljs-attr">&quot;lint-staged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;src/**/*.&#123;js,jsx,ts,tsx,vue&#125;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="下载husky"><a href="#下载husky" class="headerlink" title="下载husky"></a>下载<code>husky</code></h3><p><code>pnpm install -D husky</code></p><h3 id="添加git-hook"><a href="#添加git-hook" class="headerlink" title="添加git hook"></a>添加<code>git hook</code></h3><p><strong>⚠️注意</strong> 添加<code>hook</code>时需要有<code>.git</code>文件夹，如果是初始化的项目需先<code>git init</code>, 然后再运行<code>npx husky install</code> 创建<code>.husky</code>目录结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">cmd</span>: npx husky install<br><span class="hljs-attr">fatal</span>: not a git repository (or any <span class="hljs-keyword">of</span> the parent directories): .<span class="hljs-property">git</span><br>husky - git command not found, skipping install<br></code></pre></td></tr></table></figure><p>运行命令</p><p><code>npx husky add .husky/pre-commit &quot;npx --no-install lint-staged&quot;</code></p><p>其中<code>&quot;npx --no-install lint-staged&quot;</code> 表示调用<code>lint-staged</code></p><p>此时项目中 <code>husky</code> 配置完毕</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##  。husky/precommit</span><br>. <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname -- <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span><br><br>npx --no-install lint-staged<br><br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><a href="https://imgse.com/i/pPp2OSg"><img src="https://s1.ax1x.com/2023/07/30/pPp2OSg.png" alt="pPp2OSg.png"></a></p><p><a href="https://imgse.com/i/pPp2bY8"><img src="https://s1.ax1x.com/2023/07/30/pPp2bY8.png" alt="pPp2bY8.png"></a></p><p><strong>拦截提交表示成功</strong></p><h2 id="对于使用prettier不同人也有不同的声音"><a href="#对于使用prettier不同人也有不同的声音" class="headerlink" title="对于使用prettier不同人也有不同的声音"></a>对于使用<code>prettier</code>不同人也有不同的声音</h2><p>大佬<code>Anthony Fu</code> 在他的个人<a href="https://github.com/antfu/eslint-config">eslint-config</a>中就抛弃使用<code>prettier</code>.<br>以及有相关文章介绍他个人为什么不愿意再使用<code>prettier</code><a href="https://antfu.me/posts/why-not-prettier-zh">为什么我不使用 Prettier</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typescript类型保护在react中props的应用</title>
    <link href="/2023/07/22/typescript/typescript%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4%E5%9C%A8react%E4%B8%ADprops%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2023/07/22/typescript/typescript%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4%E5%9C%A8react%E4%B8%ADprops%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="typescript类型保护在react中props的应用"><a href="#typescript类型保护在react中props的应用" class="headerlink" title="typescript类型保护在react中props的应用"></a>typescript类型保护在react中props的应用</h1><blockquote><p>场景: 假如在react的父组件向子组件传递参数有两种类型，而两种参数类型有公共的也有不同的，如何不用可选参数去规范传递参数呢？</p></blockquote><p>如： 现在<code>parent.tsx</code>组件中想要<code>child.tsx</code>子组件，传递男性、女性两种对象，他们有公共属性<code>name</code>,<code>gender</code>，不同的是他们有各自的私有属性：男性有<code>salary</code>，女性有<code>weight</code>。</p><h2 id="可选参数的方式"><a href="#可选参数的方式" class="headerlink" title="可选参数的方式"></a>可选参数的方式</h2><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>在<code>child</code>组件中声明<code>props</code>类型, 限制<code>gender</code>为：<code>male ｜ female</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// child.tsx</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span> | <span class="hljs-string">&#x27;female&#x27;</span><br>  salary?: <span class="hljs-built_in">number</span> <span class="hljs-comment">// male 私有</span><br>  weight?: <span class="hljs-built_in">number</span> <span class="hljs-comment">// female 私有</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在想要在<code>child</code>中展示根据传入的数据分别展示男性和女性的数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// parent.tsx</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./child&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tom&quot;</span> <span class="hljs-attr">gender</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">salary</span>=<span class="hljs-string">&#123;1200&#125;</span> <span class="hljs-attr">weight</span>=<span class="hljs-string">&#123;50&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mary&quot;</span> <span class="hljs-attr">gender</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">salary</span>=<span class="hljs-string">&#123;1200&#125;</span> <span class="hljs-attr">weight</span>=<span class="hljs-string">&#123;50&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// child.tsx</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">props: Props</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">InfoItem</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (props.<span class="hljs-property">gender</span> === <span class="hljs-string">&#x27;male&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          gender: &#123;props.gender&#125;, 工资: &#123;props.salary&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>      )<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">          gender: &#123;props.gender&#125;, 体重: &#123;props.weight&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>      )<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>child.name: &#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>InfoItem:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">InfoItem</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结果与问题"><a href="#结果与问题" class="headerlink" title="结果与问题"></a>结果与问题</h3><p>能够达到正常的效果，但是又好像有点不太友好，因为我想要当<code>gender</code>为<code>male</code>时只能传<code>salary</code>，不能传<code>weight</code>,同样，为<code>female</code>时则只能传<code>weight</code>。</p><p>目前可选参数并不能做到限制<code>parent</code>组件中传参和<code>child</code>渲染判断 <code>gender</code> 与 <code>salary</code> <code>weight</code>之间的关系。</p><p><a href="https://imgse.com/i/pCbvZGT"><img src="https://s1.ax1x.com/2023/07/22/pCbvZGT.png" alt="pCbvZGT.png"></a></p><h2 id="使用union类型做类型保护"><a href="#使用union类型做类型保护" class="headerlink" title="使用union类型做类型保护"></a>使用union类型做类型保护</h2><h3 id="可以使用联合类型的方式来做类型保护"><a href="#可以使用联合类型的方式来做类型保护" class="headerlink" title="可以使用联合类型的方式来做类型保护"></a>可以使用联合类型的方式来做类型保护</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>&#125; &amp; (maleProps | femaleProps)<br><br><span class="hljs-keyword">type</span> maleProps = &#123;<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span><br>  <span class="hljs-attr">salary</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">type</span> femaleProps = &#123;<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;female&#x27;</span><br>  <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在联合类型<code>maleProps</code>、<code>femaleProps</code>中限制<code>gender</code>属性值和各自的私有属性.<br>这样当<code>props.gender</code>为<code>male</code>时，则命中<code>maleProps</code>，实际<code>props</code>就等同于:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;male&#x27;</span><br>  <span class="hljs-attr">salary</span>: <span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当<code>props.gender</code>为<code>famale</code>时，则命中<code>famaleProps</code>，实际<code>props</code>就等同于:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Props</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;female&#x27;</span><br>  <span class="hljs-attr">weight</span>: <span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现的效果"><a href="#实现的效果" class="headerlink" title="实现的效果"></a>实现的效果</h3><p>此时<code>child</code>中判断就能够根据前置条件判断属性了 <code>parent</code>也会根据之前传入的参数做限制了。</p><p><a href="https://imgse.com/i/pCbvWLj"><img src="https://s1.ax1x.com/2023/07/22/pCbvWLj.png" alt="pCbvWLj.png"></a></p><p><a href="https://imgse.com/i/pCbxilD"><img src="https://s1.ax1x.com/2023/07/22/pCbxilD.png" alt="pCbxilD.png"></a></p><h2 id="在response响应数据中的应用"><a href="#在response响应数据中的应用" class="headerlink" title="在response响应数据中的应用"></a>在response响应数据中的应用</h2><p>在请求数据的时候也可以根据响应的状态来限制响应体中只有数据或错误信息.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/* eslint-disable @typescript-eslint/no-unused-vars */</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ResponseData</span>&lt;T&gt; = <span class="hljs-title class_">SuccessRes</span>&lt;T&gt; | <span class="hljs-title class_">ErrorRes</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">SuccessRes</span>&lt;T&gt; = &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-attr">data</span>: T, <span class="hljs-attr">timestamp</span>: <span class="hljs-title class_">Date</span> &#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">ErrorRes</span> = &#123; <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">timestamp</span>: <span class="hljs-title class_">Date</span> &#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">res1</span>:<span class="hljs-title class_">ResponseData</span>&lt;<span class="hljs-built_in">number</span>&gt; = &#123;<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>  <span class="hljs-attr">data</span>:<span class="hljs-number">100</span>,<br>  <span class="hljs-attr">timestamp</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">res2</span>:<span class="hljs-title class_">ResponseData</span>&lt;<span class="hljs-built_in">number</span>&gt; = &#123;<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>  <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;api error&#x27;</span>,<br>  <span class="hljs-attr">timestamp</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>如果属性没有对应上<code>status</code>也会报错</p><p><a href="https://imgse.com/i/pCbxW9K"><img src="https://s1.ax1x.com/2023/07/22/pCbxW9K.png" alt="pCbxW9K.png"></a></p><p>ps:</p><p><a href="https://stackblitz.com/edit/stackblitz-starters-hyceax?file=src/App.tsx">https://stackblitz.com/edit/stackblitz-starters-hyceax?file=src%2FApp.tsx</a></p><p><a href="https://www.youtube.com/watch?v=9i38FPugxB8">https://www.youtube.com/watch?v=9i38FPugxB8</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis的常用命令</title>
    <link href="/2023/06/25/redis/redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/06/25/redis/redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="redis的常用命令"><a href="#redis的常用命令" class="headerlink" title="redis的常用命令"></a>redis的常用命令</h2><p>了解redis的常用命令之前先了解一下redis：redis是一个运行在内存中，存储内容为键值对形式的一个高效的非关系性数据库，redis存储的值类型有很多：<code>string</code>，<code>list</code>， <code>set</code>，<code>sorted set</code>，<code>hash</code>， <code>geospatial</code>，<code>bitmap</code> 等。</p><h3 id="string类型的相关操作"><a href="#string类型的相关操作" class="headerlink" title="string类型的相关操作"></a>string类型的相关操作</h3><ul><li><code>SET</code> stores a string value 存储(已存在则修改)一个值.</li><li><code>SETNX</code> stores a string value only if the key doesn’t already exist. Useful for implementing locks 存储一个值（只有当这个key不存在的时候）.</li><li><code>GET</code> retrieves a string value 检索一个值.</li><li><code>MGET</code> retrieves multiple string values in a single operation 一次检索多个key.</li><li><code>INCRBY</code> atomically increments (and decrements when passing a negative number) counters stored at a given key 根据一个数字自增一个key的value, <code>INCR</code> 以<code>1</code>为单位自增.</li></ul><h3 id="list类型的相关操作"><a href="#list类型的相关操作" class="headerlink" title="list类型的相关操作"></a>list类型的相关操作</h3><ul><li><code>LRANGE</code> 查看list  lrange list1 0 -1</li><li><code>LPUSH</code> adds a new element to the head of a list; RPUSH adds to the tail 头部添加一个元素， RPUSH 是在尾部添加一个元素.</li><li><code>LPOP</code> removes and returns an element from the head of a list; RPOP does the same but from the tails of a list 头部删除一个元素， RPOP 是在尾部添加一个元素.</li><li><code>LLEN</code> returns the length of a list 返回list的长度.</li><li><code>LMOVE</code> atomically moves elements from one list to another 将list1 的一个元素移动的list2中去 <code>LMOVE list1 list2 LEFT LEFT</code>.</li><li><code>LTRIM</code> reduces a list to the specified range of elements 限制list的长度 <code>LTRIM list1 0 1</code>.</li></ul><h3 id="set类型的相关操作"><a href="#set类型的相关操作" class="headerlink" title="set类型的相关操作"></a>set类型的相关操作</h3><ul><li><code>SADD</code> adds a new member to a set 添加一个成员到set中.</li><li><code>SREM</code> removes the specified member from the set 删除特定的成员.</li><li><code>SISMEMBER</code> tests a string for set membership 查询set是否包含一个成员.</li><li><code>SINTER</code> returns the set of members that two or more sets have in common (i.e., the intersection) 返回一个set与2个或多个set的交集.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; sadd set1 1 2 3 4<br>(<span class="hljs-built_in">integer</span>) 4<br>&gt; sadd set2 1 2 3 5<br>(<span class="hljs-built_in">integer</span>) 4<br><br>&gt; SINTER set1 set2<br>1) <span class="hljs-string">&quot;1&quot;</span><br>2) <span class="hljs-string">&quot;2&quot;</span><br>3) <span class="hljs-string">&quot;3&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>SCARD</code> returns the size (a.k.a. cardinality) of a set 返回set的大小.</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在nest中使用typeorm.md</title>
    <link href="/2023/06/25/nest/%E5%A6%82%E4%BD%95%E5%9C%A8nest%E4%B8%AD%E4%BD%BF%E7%94%A8typeorm/"/>
    <url>/2023/06/25/nest/%E5%A6%82%E4%BD%95%E5%9C%A8nest%E4%B8%AD%E4%BD%BF%E7%94%A8typeorm/</url>
    
    <content type="html"><![CDATA[<h1 id="如何在nest中使用typeorm"><a href="#如何在nest中使用typeorm" class="headerlink" title="如何在nest中使用typeorm"></a>如何在nest中使用typeorm</h1><h2 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm install @nestjs/typeorm typeorm mysql2 -S<br></code></pre></td></tr></table></figure><h2 id="创建测试-entity"><a href="#创建测试-entity" class="headerlink" title="创建测试 entity"></a>创建测试 entity</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g resource user<br></code></pre></td></tr></table></figure><p>修改 entity user 的属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Entity</span>, <span class="hljs-title class_">Column</span>, <span class="hljs-title class_">PrimaryGeneratedColumn</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><br><span class="hljs-meta">@Entity</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-meta">@PrimaryGeneratedColumn</span>()<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-meta">@Column</span>(&#123;<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">50</span>,<br>  &#125;)<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="在入口app-module中添加-typeOrmModule-模块"><a href="#在入口app-module中添加-typeOrmModule-模块" class="headerlink" title="在入口app.module中添加 typeOrmModule 模块"></a>在入口app.module中添加 typeOrmModule 模块</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.controller&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user/user.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeOrmModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">UserModule</span>,<br>    <span class="hljs-title class_">TypeOrmModule</span>.<span class="hljs-title function_">forRoot</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>      <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>      <span class="hljs-attr">port</span>: <span class="hljs-number">3306</span>,<br>      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>      <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>      <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;typeorm_mysql&#x27;</span>,<br>      <span class="hljs-attr">synchronize</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 没有的表情况是否同步创建</span><br>      <span class="hljs-attr">logging</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">entities</span>: [<span class="hljs-string">&#x27;./**/entities/*.ts&#x27;</span>], <span class="hljs-comment">// 关联的实体类</span><br>      <span class="hljs-attr">poolSize</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">// 数据库连接池的最大数量</span><br>      <span class="hljs-attr">migrations</span>: [],<br>      <span class="hljs-attr">subscribers</span>: [],<br>      <span class="hljs-attr">connectorPackage</span>: <span class="hljs-string">&#x27;mysql2&#x27;</span>, <span class="hljs-comment">// 驱动包</span><br>      <span class="hljs-attr">extra</span>: &#123; <span class="hljs-comment">// 发送给驱动包的参数</span><br>        <span class="hljs-attr">authPlugin</span>: <span class="hljs-string">&#x27;sha256_password&#x27;</span>,<br>      &#125;,<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AppController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AppService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><h2 id="在对应的实体service中实现CURD"><a href="#在对应的实体service中实现CURD" class="headerlink" title="在对应的实体service中实现CURD"></a>在对应的实体service中实现CURD</h2><ul><li>注入entityManager的方式</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.service.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CreateUserDto</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/create-user.dto&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UpdateUserDto</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/update-user.dto&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectEntityManager</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EntityManager</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./entities/user.entity&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-comment">// 注入entityManager</span><br>  <span class="hljs-meta">@InjectEntityManager</span>()<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">manager</span>: <span class="hljs-title class_">EntityManager</span>;<br><br>  <span class="hljs-title function_">create</span>(<span class="hljs-params">createUserDto: CreateUserDto</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">manager</span>.<span class="hljs-title function_">save</span>(<span class="hljs-title class_">User</span>, createUserDto);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注入 Repository 的方式</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.module.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.controller&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./entities/user.entity&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeOrmModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">TypeOrmModule</span>.<span class="hljs-title function_">forFeature</span>([<span class="hljs-title class_">User</span>])],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">UserController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">UserService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModule</span> &#123;&#125;<br><br><br><span class="hljs-comment">// user.service.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CreateUserDto</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/create-user.dto&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UpdateUserDto</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/update-user.dto&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectRepository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EntityManager</span>, <span class="hljs-title class_">Repository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./entities/user.entity&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-comment">// 注入Repository</span><br>  <span class="hljs-meta">@InjectRepository</span>(<span class="hljs-title class_">User</span>)<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">userRepository</span>: <span class="hljs-title class_">Repository</span>&lt;<span class="hljs-title class_">User</span>&gt;;<br><br>  <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userRepository</span>.<span class="hljs-title function_">find</span>();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nest自定义中间件MiddleWare</title>
    <link href="/2023/06/11/nest/Nest%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <url>/2023/06/11/nest/Nest%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Nest自定义中间件的使用"><a href="#Nest自定义中间件的使用" class="headerlink" title="Nest自定义中间件的使用"></a>Nest自定义中间件的使用</h2><h3 id="实现一个自定义中间件类"><a href="#实现一个自定义中间件类" class="headerlink" title="实现一个自定义中间件类"></a>实现一个自定义中间件类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestMiddleware</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestMiddleware</span> &#123;<br>  <span class="hljs-title function_">use</span>(<span class="hljs-params">req: <span class="hljs-built_in">any</span>, res: <span class="hljs-built_in">any</span>, next: () =&gt; <span class="hljs-built_in">void</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;loggerMiddleWare-调用&#x27;</span>);<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义中间件实现了<code>NestMiddleware</code>类，只有一个方法<code>use</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> [Middleware](https://docs.nestjs.com/middleware)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@publicApi</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NestMiddleware</span>&lt;<span class="hljs-title class_">TRequest</span> = <span class="hljs-built_in">any</span>, <span class="hljs-title class_">TResponse</span> = <span class="hljs-built_in">any</span>&gt; &#123;<br>    <span class="hljs-title function_">use</span>(<span class="hljs-attr">req</span>: <span class="hljs-title class_">TRequest</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">TResponse</span>, <span class="hljs-attr">next</span>: <span class="hljs-function">(<span class="hljs-params">error?: <span class="hljs-built_in">Error</span> | <span class="hljs-built_in">any</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>): <span class="hljs-built_in">any</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在中间件中能够获取到请求信息，能够通过<code>next</code>方法执行下一个中间件,<br>也能够提前响应请求</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestMiddleware</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestMiddleware</span> &#123;<br>  <span class="hljs-title function_">use</span>(<span class="hljs-params">req: Request, res: Response, next: NextFunction</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;中间件拦截结束响应&#x27;</span> &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中间件中注入其他服务"><a href="#中间件中注入其他服务" class="headerlink" title="中间件中注入其他服务"></a>中间件中注入其他服务</h3><p><code>Nest</code>将中间件做成类的另一个好处就是可以注入其他服务</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestMiddleware</span> &#123;<br>  <span class="hljs-comment">// @Inject(AppService)</span><br>  <span class="hljs-comment">// private readonly appService: AppService;</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> appService: AppService</span>) &#123;&#125;<br><br>  <span class="hljs-title function_">use</span>(<span class="hljs-params">req: Request, res: Response, next: NextFunction</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;中间件拦截&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;中间件调用其他服务:&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">appService</span>.<span class="hljs-title function_">getHello</span>());<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="自定义中间件的使用"><a href="#自定义中间件的使用" class="headerlink" title="自定义中间件的使用"></a>自定义中间件的使用</h3><p>在<code>module</code>中使用，<code>module</code>实现<code>NestModule</code>类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">Module</span>,<br>  <span class="hljs-title class_">NestModule</span>,<br>  <span class="hljs-title class_">MiddlewareConsumer</span>,<br>  <span class="hljs-title class_">RequestMethod</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Logger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleWare/logger.middleware&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestModule</span> &#123;<br>  <span class="hljs-title function_">configure</span>(<span class="hljs-params">consumer: MiddlewareConsumer</span>) &#123;<br>    consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Logger</span>).<span class="hljs-title function_">forRoutes</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">method</span>: <span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">GET</span> &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>实现的<code>NestModule</code>中的<code>configure</code>方法</li><li><code>configure</code> 方法接受一个参数 <code>consumer</code> (消费者)</li><li><code>configure</code> 通过<code>apply</code>方法接受一个或多个中间件，返回一个<code>MiddlewareConfigProxy</code> 中间件代理</li><li>代理对象上有<code>exclude</code>： 排除的路由, <code>forRoutes</code>： 要匹配的路由 两个方法</li></ul><p><strong><code>forRoutes</code>的匹配方式</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 以下三种方式均可传多个参数匹配多个</span><br><span class="hljs-comment">// 方式一: route匹配</span><br>consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Logger</span>).<span class="hljs-title function_">forRoutes</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br><br><span class="hljs-comment">// 方式二：routeInfo匹配</span><br>consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Logger</span>).<span class="hljs-title function_">forRoutes</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">method</span>: <span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">GET</span> &#125;);<br><br><span class="hljs-comment">// 方式三：控制器匹配</span><br>consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Logger</span>).<span class="hljs-title function_">forRoutes</span>(appController);<br></code></pre></td></tr></table></figure><h3 id="函数式中间件"><a href="#函数式中间件" class="headerlink" title="函数式中间件"></a>函数式中间件</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// loggerFn.middleware.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">LoggerFn</span>(<span class="hljs-params">req: Request, res: Response, next: NextFunction</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;函数式中间件拦截&#x27;</span>);<br>  <span class="hljs-title function_">next</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>结构跟自定义类中间件一样, <code>nest</code>全局中间件只能使用函数式的中间件.</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nest自定义一个异常拦截器</title>
    <link href="/2023/06/11/nest/Nest%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2023/06/11/nest/Nest%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="自定义一个的异常拦截器需要实现-ExceptionFilter-类"><a href="#自定义一个的异常拦截器需要实现-ExceptionFilter-类" class="headerlink" title="自定义一个的异常拦截器需要实现 ExceptionFilter 类"></a>自定义一个的异常拦截器需要实现 <code>ExceptionFilter</code> 类</h2><p>先看全部代码 👇：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">ArgumentsHost</span>,<br>  <span class="hljs-title class_">Catch</span>,<br>  <span class="hljs-title class_">ExceptionFilter</span>,<br>  <span class="hljs-title class_">HttpException</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><br><span class="hljs-comment">// 捕获 httpException</span><br><span class="hljs-meta">@Catch</span>(<span class="hljs-title class_">HttpException</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExceptionFilter</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> exception Http请求错误</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> host ： ArgumentsHost 返回执行结果数组</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">catch</span>(<span class="hljs-attr">exception</span>: <span class="hljs-title class_">HttpException</span>, <span class="hljs-attr">host</span>: <span class="hljs-title class_">ArgumentsHost</span>) &#123;<br>    <span class="hljs-comment">// 选择http上下文</span><br>    <span class="hljs-keyword">const</span> ctx = host.<span class="hljs-title function_">switchToHttp</span>();<br>    <span class="hljs-keyword">const</span> request = ctx.<span class="hljs-property">getRequest</span>&lt;<span class="hljs-title class_">Request</span>&gt;();<br>    <span class="hljs-keyword">const</span> response = ctx.<span class="hljs-property">getResponse</span>&lt;<span class="hljs-title class_">Response</span>&gt;();<br>    <span class="hljs-comment">// 获取错误状态</span><br>    <span class="hljs-keyword">const</span> status = exception.<span class="hljs-title function_">getStatus</span>();<br><br>    <span class="hljs-comment">// express 拦截响应请求重新发送</span><br>    response.<span class="hljs-title function_">status</span>(status).<span class="hljs-title function_">json</span>(&#123;<br>      <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>      <span class="hljs-attr">data</span>: exception.<span class="hljs-property">message</span>,<br>      status,<br>      <span class="hljs-attr">path</span>: request.<span class="hljs-property">path</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请求失败辣&#x27;</span>,<br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Catch-装饰器指明需要捕获的异常"><a href="#Catch-装饰器指明需要捕获的异常" class="headerlink" title="@Catch() 装饰器指明需要捕获的异常"></a><code>@Catch()</code> 装饰器指明需要捕获的异常</h3><p>这里指明捕获 <code>HttpException</code> 即只捕获http异常。</p><h3 id="实现ExceptionFilter类中的catch方法"><a href="#实现ExceptionFilter类中的catch方法" class="headerlink" title="实现ExceptionFilter类中的catch方法"></a>实现<code>ExceptionFilter</code>类中的<code>catch</code>方法</h3><p><code>catch</code>方法有两个参数：</p><ul><li><code>exception</code>： 绑定的异常类型</li><li><code>host</code>:  根据执行上下文获取处理程序参数<code>ArgumentsHost</code></li></ul><h3 id="host-switchToHttp-选择执行上下文"><a href="#host-switchToHttp-选择执行上下文" class="headerlink" title="host.switchToHttp() 选择执行上下文"></a><code>host.switchToHttp()</code> 选择执行上下文</h3><p>在执行上下文中，可以获取到请求与响应。不过要方便后续的使用还是建议添加类型断言<br>从express中取出类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br>...<br><span class="hljs-comment">// 选择http上下文</span><br>    <span class="hljs-keyword">const</span> ctx = host.<span class="hljs-title function_">switchToHttp</span>();<br>    <span class="hljs-keyword">const</span> request = ctx.<span class="hljs-property">getRequest</span>&lt;<span class="hljs-title class_">Request</span>&gt;();<br>    <span class="hljs-keyword">const</span> response = ctx.<span class="hljs-property">getResponse</span>&lt;<span class="hljs-title class_">Response</span>&gt;();<br><br></code></pre></td></tr></table></figure><h3 id="当前请求状态"><a href="#当前请求状态" class="headerlink" title="当前请求状态"></a>当前请求状态</h3><p>当前的请求状态就是从第一个参数<code>exception</code>异常中去获取。</p><h3 id="最后需要将拦截的请求重新发送给客户端"><a href="#最后需要将拦截的请求重新发送给客户端" class="headerlink" title="最后需要将拦截的请求重新发送给客户端"></a>最后需要将拦截的请求重新发送给客户端</h3><p>封装自定义的拦截响晴信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// express 拦截响应请求重新发送</span><br>   response.<span class="hljs-title function_">status</span>(status).<span class="hljs-title function_">json</span>(&#123;<br>     <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,<br>     <span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<br>     <span class="hljs-attr">data</span>: exception.<span class="hljs-property">message</span>,<br>     status,<br>     <span class="hljs-attr">path</span>: request.<span class="hljs-property">path</span>,<br>     <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请求失败辣&#x27;</span>,<br>   &#125;);<br></code></pre></td></tr></table></figure><h2 id="添加拦截"><a href="#添加拦截" class="headerlink" title="添加拦截"></a>添加拦截</h2><h3 id="添加全局拦截"><a href="#添加全局拦截" class="headerlink" title="添加全局拦截"></a>添加全局拦截</h3><p>使用 <code>useGlobalFilters</code> 添加全局拦截</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// main.ts</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useGlobalFilters</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpFilter</span>());<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="指定拦截"><a href="#指定拦截" class="headerlink" title="指定拦截"></a>指定拦截</h3><p>使用<code>@UseFilters</code>指定函数拦截或类拦截</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// app.controller.ts</span><br><span class="hljs-meta">@Controller</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> appService: AppService</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;/error&#x27;</span>)<br>    <span class="hljs-meta">@UseFilters</span>(<span class="hljs-title class_">HttpFilter2</span>)<br>    <span class="hljs-title function_">getError</span>(): <span class="hljs-built_in">string</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">appService</span>.<span class="hljs-title function_">getError</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nest创建一个简单的拦截器</title>
    <link href="/2023/06/08/nest/Nest%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2023/06/08/nest/Nest%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="实现一个-NestInterceptor-类"><a href="#实现一个-NestInterceptor-类" class="headerlink" title="实现一个 NestInterceptor 类"></a>实现一个 <code>NestInterceptor</code> 类</h3><p>具体代码如下👇：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">CallHandler</span>,<br>  <span class="hljs-title class_">ExecutionContext</span>,<br>  <span class="hljs-title class_">Injectable</span>,<br>  <span class="hljs-title class_">NestInterceptor</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Observable</span>, map &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span>&lt;T&gt; &#123;<br>  <span class="hljs-attr">data</span>: T;<br>&#125;<br><br><span class="hljs-comment">// 声明为可注射的</span><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseInterceptor</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestInterceptor</span> &#123;<br>  <span class="hljs-title function_">intercept</span>(<span class="hljs-attr">context</span>: <span class="hljs-title class_">ExecutionContext</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">CallHandler</span>): <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-title class_">Data</span>&lt;T&gt;&gt; &#123;<br>    <span class="hljs-keyword">return</span> next.<span class="hljs-title function_">handle</span>().<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          data,<br>          <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>        &#125;;<br>      &#125;),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1、实现-NestInterceptor-类中的方法-intercept"><a href="#1、实现-NestInterceptor-类中的方法-intercept" class="headerlink" title="1、实现 NestInterceptor 类中的方法 intercept"></a>1、实现 <code>NestInterceptor</code> 类中的方法 <code>intercept</code></h3><p><code>intercept</code> 函数两个参数</p><ul><li><code>context</code>: ExecutionContext 执行上下文  可以获取 getClass getHandler</li><li><code>CallHandler</code>: 只有一个handle方法，返回一个Observable 监听响应数据流<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NestInterceptor</span>&lt;T = <span class="hljs-built_in">any</span>, R = <span class="hljs-built_in">any</span>&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Method to implement a custom interceptor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context an `ExecutionContext` object providing methods to access the  执行上下文</span><br><span class="hljs-comment">     * route handler and class about to be invoked.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> next a reference to the `CallHandler`, which provides access to an  返回一个Observable</span><br><span class="hljs-comment">     * `Observable` representing the response stream from the route handler.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">intercept</span>(<span class="hljs-attr">context</span>: <span class="hljs-title class_">ExecutionContext</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">CallHandler</span>&lt;T&gt;): <span class="hljs-title class_">Observable</span>&lt;R&gt; | <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Observable</span>&lt;R&gt;&gt;;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2、使用-rxjs-中的Observable-进行响应式编程"><a href="#2、使用-rxjs-中的Observable-进行响应式编程" class="headerlink" title="2、使用 rxjs 中的Observable 进行响应式编程"></a>2、使用 <code>rxjs</code> 中的<code>Observable</code> 进行响应式编程</h3><p><a href="https://rxjs.dev/">了解rxjs</a><br>什么是响应式编程呢，可以看看这个: <a href="https://zhuanlan.zhihu.com/p/27678951">响应式编程（Reactive Programming）介绍</a><br>大概就是一个异步的、流式的编程方式</p><h3 id="3、添加全局拦截器"><a href="#3、添加全局拦截器" class="headerlink" title="3、添加全局拦截器"></a>3、添加全局拦截器</h3><p>给拦截器类添加注解 <code>@Injectable()</code></p><p>在服务入口文件中(main.ts)中，调用Nest服务实例方法<code>useGlobalInterceptors</code>添加全局拦截器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ResponseInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./interceptor/response.interceptor&#x27;</span>;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  <span class="hljs-comment">// 添加全局拦截</span><br>  app.<span class="hljs-title function_">useGlobalInterceptors</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseInterceptor</span>());<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><h3 id="额外知识点：-返回值利用了协变原理"><a href="#额外知识点：-返回值利用了协变原理" class="headerlink" title="额外知识点： 返回值利用了协变原理"></a>额外知识点： 返回值利用了协变原理</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span>&lt;T&gt;&#123;<br>   <span class="hljs-attr">data</span>: T<br>&#125;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Func</span>&lt;T&gt; = <span class="hljs-function">(<span class="hljs-params">arg: T</span>) =&gt;</span> <span class="hljs-title class_">Data</span>&lt;T&gt;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">func</span>: <span class="hljs-title class_">Func</span>&lt;<span class="hljs-built_in">string</span>&gt; = <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">data</span>: arg,<br>       <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>   &#125;<br>&#125;<br><span class="hljs-comment">// 能够正常运行</span><br><span class="hljs-comment">// 返回值能够满足接口 Data 是因为 TS的协变原理 即：子类能够赋值给父类</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习Nest先理解的概念</title>
    <link href="/2023/06/04/nest/%E5%AD%A6%E4%B9%A0Nest%E5%85%88%E7%90%86%E8%A7%A3%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/06/04/nest/%E5%AD%A6%E4%B9%A0Nest%E5%85%88%E7%90%86%E8%A7%A3%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是IOC-inverse-of-control"><a href="#什么是IOC-inverse-of-control" class="headerlink" title="什么是IOC (inverse of control)"></a>什么是IOC (inverse of control)</h2><p><strong>IOC 也就是控制反转, 什么是控制反转？</strong></p><p>从主动创建依赖，到被动等待依赖注入就是控制反转。</p><p><strong>什么叫主动创建依赖？</strong></p><p>手动创建对象,选择依赖的过程；</p><p><strong>什么是被动等待依赖注入？</strong></p><p>申明控制器(controller)，控制器接受传入的依赖(service)，就是一个等待被动注入依赖的过程。</p><p>整个过程分别声明了controller以及service，并通过module将两者整合在一起。</p><h2 id="controller-和-service上的注解"><a href="#controller-和-service上的注解" class="headerlink" title="controller 和 service上的注解"></a>controller 和 service上的注解</h2><p>在controller中的class上声明了<code>@Controller</code>，表示可以被注入，且只能被注入，顾名思义，控制器，只能接受注入，不能将控制器注入到其他服务中。</p><p>在service中的class上声明了<code>@Injectable</code>表示这个class 可以注入, 也可以被注入。</p><p>在module中的class上声明了<code>@Module</code>，其他<code>providers</code>也就是表示供应者</p><h2 id="什么是AOP-Aspect-Oriented-Programming"><a href="#什么是AOP-Aspect-Oriented-Programming" class="headerlink" title="什么是AOP (Aspect Oriented Programming)"></a>什么是AOP (Aspect Oriented Programming)</h2><p>一个请求过来，会进过controller， Service，Repository等逻辑，当想要添加日志或权限校验错误处理等逻辑时，每个业务单独添加这种方式是具有侵入业务代码很难维护且不够健壮的， 而面向切面变成的意思就是在这些业务逻辑时，在另一个切面当度来实现，这种变成方式叫做面向切面编程</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f99087120e847eab901738bf8504d21~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS定义类型声明</title>
    <link href="/2023/05/14/typescript/TS%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/"/>
    <url>/2023/05/14/typescript/TS%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="初始化一个ts项目"><a href="#初始化一个ts项目" class="headerlink" title="初始化一个ts项目"></a>初始化一个ts项目</h2><p>全局安装<code>typescript</code>, <code>tsc</code> 是typescript的脚手架工具， 安装了<code>typescript</code> 就会携带 <code>tsc</code>，</p><p>初始化ts配置文件 <code>tsconfig.json</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tsc --init<br></code></pre></td></tr></table></figure><h2 id="自定义类型来源"><a href="#自定义类型来源" class="headerlink" title="自定义类型来源"></a>自定义类型来源</h2><h3 id="namespace-命名空间"><a href="#namespace-命名空间" class="headerlink" title="namespace 命名空间"></a>namespace 命名空间</h3><p>命名空间会在全局上挂载一个对象<br>如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">const</span> result = <span class="hljs-title class_">MyLib</span>.<span class="hljs-title function_">getResult</span>()<br><br><span class="hljs-comment">// index.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">MyLib</span> &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getResult</span>(<span class="hljs-params"></span>): <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="module-定义类型模块"><a href="#module-定义类型模块" class="headerlink" title="module 定义类型模块"></a>module 定义类型模块</h3><p>在类似<code>@types/node</code> 这类很多的<code>@types/xx</code>npm类型包中的类型声明，使用<code>module</code>模式来全局定义的。</p><p><code>@types</code> 包是由 <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">DefinitelyTyped</a> 项目统一管理的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fnTest</span>(<span class="hljs-params">fn: moduleFn</span>) &#123;<br>  fn.<span class="hljs-title function_">getString</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// index.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">&#x27;ts/test&#x27;</span> &#123;<br>  <span class="hljs-keyword">type</span> moduleFn = &#123;<br>    <span class="hljs-title function_">getString</span>(<span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span>): <span class="hljs-built_in">string</span> <br>  &#125;<br>  <span class="hljs-keyword">type</span> moduleVariable = <span class="hljs-string">&#x27;variable&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="全局变量和函数"><a href="#全局变量和函数" class="headerlink" title="全局变量和函数"></a>全局变量和函数</h3><p>通过 <code>declare</code> 声明变量和函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getFn</span>(<span class="hljs-string">&#x27;str&#x27;</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo)<br><br><span class="hljs-comment">// index.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getFn</span>(<span class="hljs-params">str: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> <span class="hljs-attr">foo</span>: <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><h3 id="描述函数重载"><a href="#描述函数重载" class="headerlink" title="描述函数重载"></a>描述函数重载</h3><p>申明语句中只能定义类型，不要在声明语句中定义具体的实现</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><br><span class="hljs-keyword">let</span> widget = <span class="hljs-title function_">getWidget</span>(<span class="hljs-number">45</span>)<br><span class="hljs-keyword">let</span> widgets = <span class="hljs-title function_">getWidget</span>(<span class="hljs-string">&#x27;str&#x27;</span>)<br><br><span class="hljs-comment">// index.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getWidget</span>(<span class="hljs-params">arg: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getWidget</span>(<span class="hljs-params">arg: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span>[]<br><br></code></pre></td></tr></table></figure><h3 id="声明class"><a href="#声明class" class="headerlink" title="声明class"></a>声明class</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubGreet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Greet</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">str: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">super</span>(str)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// index.d.ts</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Greet</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>);<br><br>  <span class="hljs-attr">greeting</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-title function_">showGreeting</span>(): <span class="hljs-built_in">void</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类型的作用域"><a href="#类型的作用域" class="headerlink" title="类型的作用域"></a>类型的作用域</h2><p>默认 编写声明文件 <code>xx.d.ts</code>， dts中的类型声明默认是全局的;<br>如果模块内部有<code>import</code> <code>export</code>  则需要通过<code>import type</code>单独进行类型引用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; localVariable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./types/local-module&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">localVar</span>: localVariable = <span class="hljs-string">&#x27;str&#x27;</span><br><br><span class="hljs-comment">// local-module.d.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> localVariable = <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>如果一个全局的dts中依赖了外部的类型,这个时候会去<code>import</code> 外部的类型声明，但是这时候就会将全局的dts变成本地化，即不能全局使用声明的变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><span class="hljs-comment">// 报错</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">globalVar</span>: globalVariable = <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-comment">// Cannot find name &#x27;globalVariable&#x27;</span><br><br><span class="hljs-comment">// global.d.ts</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> globalVariable = <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>这个时候 可以通过 编辑器指令<code>reference</code>引入类型声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">globalVar</span>: globalVariable = <span class="hljs-string">&#x27;str&#x27;</span><br><br><span class="hljs-comment">// global.d.ts</span><br><span class="hljs-comment">/// &lt;reference lib=&quot;node&quot; /&gt;</span><br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">type</span> globalVariable = <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>声明类型的三种方式</p><ul><li><code>namespace</code>: 声明一个全局对象，属性即为声明的类型</li><li><code>module</code>： 跟 <code>namespace</code> 没有区别</li><li><code>es module</code> es 标准的模块语法， 额外拓展了 <code>import type</code></li></ul></li><li><p><code>.d.ts</code> dts文件的类型声明默认是全局的，如果其中有 <code>import</code> <code>export</code> 将会变成局部的</p></li><li><p>全局的类型声明来源: <code>.d.ts</code>、 <code>@types</code> 以及 ts的内置声明<code>lib</code> 包括 dom 和 es</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS逆变协变</title>
    <link href="/2023/05/09/typescript/TS%E9%80%86%E5%8F%98%E5%8D%8F%E5%8F%98/"/>
    <url>/2023/05/09/typescript/TS%E9%80%86%E5%8F%98%E5%8D%8F%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<h2 id="TS逆变协变"><a href="#TS逆变协变" class="headerlink" title="TS逆变协变"></a>TS逆变协变</h2><ul><li>什么是父类型子类型</li><li>了解什么是逆变协变</li><li>为什么要有逆变协变</li></ul><h3 id="父类型-子类型"><a href="#父类型-子类型" class="headerlink" title="父类型 子类型"></a>父类型 子类型</h3><blockquote><p>子类型就是比父类型更加具体</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><br><span class="hljs-keyword">type</span> parent = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">boolean</span> | <span class="hljs-built_in">number</span><br><span class="hljs-keyword">type</span> child = <span class="hljs-built_in">string</span> | <span class="hljs-built_in">boolean</span><br><span class="hljs-keyword">type</span> test1 = child <span class="hljs-keyword">extends</span> parent ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">type</span> test2 = parent <span class="hljs-keyword">extends</span> child ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> <span class="hljs-comment">// false </span><br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sun</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>    <span class="hljs-attr">class</span>: <span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-keyword">type</span> test3 = <span class="hljs-title class_">Sun</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> <span class="hljs-comment">// true</span><br><span class="hljs-keyword">type</span> test4 = <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sun</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>可以看出 child 是 parent 的子类型， 比parent 更加具体；</p><p>同样 Sun 是 Person 的子类型， 比Person多了个属性， 比Person 更加具体；</p><hr><h3 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h3><blockquote><p>什么是协变： 子类型可以赋值给父类型就叫做协变</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-attr">p1</span>:<span class="hljs-title class_">Person</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">56</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">s1</span>:<span class="hljs-title class_">Sun</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>    <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;c1&#x27;</span><br>&#125;<br><br><br>p1 = s1<br>s1 = p1 <span class="hljs-comment">// roperty &#x27;class&#x27; is missing in type &#x27;Person&#x27; but required in type &#x27;Sun&#x27;.</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">class</span>) <span class="hljs-comment">// Property &#x27;class&#x27; does not exist on type &#x27;Person&#x27;</span><br></code></pre></td></tr></table></figure><p>在这个例子中 Sun 类型比 Person 类型多了一个class 属性，Sun 中其他属性跟 Person 一样， 所以可认为 Sun 是 Person 的子类型;</p><p>并且 p1 是 Person 类型， s1 是 Sun 类型， s1 可以赋值给 p1, 但 p1 不能赋值给 s1;</p><p><strong>PS: 为什么父类型的不能赋值给子类型的?</strong></p><p>子类型中可能有拓展的属性，所以不能直接赋值；<br>同样，子类型赋值给父亲类型的变量，也只会保留父类型的属性</p><hr><h3 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h3><blockquote><p>什么是逆变： 父类型可以赋值给子类型</p></blockquote><p>第一个案例</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-title function_">func1</span> = (<span class="hljs-params">str: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>) =&gt; <span class="hljs-literal">undefined</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">func2</span> = (<span class="hljs-params">str: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span></span>) =&gt; <span class="hljs-literal">undefined</span> <br><br>func1 = func2<br>func2 = func1 <span class="hljs-comment">// error </span><br></code></pre></td></tr></table></figure><p>func1 中的参数 是 func2 中的参数的子类型，func2 能够赋值给func1， 子类型能够赋值给父类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> <span class="hljs-title function_">splitStringByType_string</span> = (<span class="hljs-params">str: <span class="hljs-built_in">string</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">splitStringByType</span> = (<span class="hljs-params">str: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span></span>) =&gt; &#123;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">typeof</span> str) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;string&#x27;</span>:<br>            <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;number&#x27;</span>: <br>            <span class="hljs-keyword">return</span> [str.<span class="hljs-title function_">toString</span>()];<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;boolean&#x27;</span>: <br>            <span class="hljs-keyword">return</span> [str.<span class="hljs-title function_">toString</span>()];<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">return</span> [];<br>    &#125;<br>&#125;<br><br>splitStringByType_string = splitStringByType<br>splitStringByType = splitStringByType_string <span class="hljs-comment">// error  splitStringByType 可能有number  boolean的情况</span><br></code></pre></td></tr></table></figure><p>splitStringByType 中的参数也是 splitStringByType_string 的父类型，能够这样赋值的逻辑就是<br><strong>参数为父类型的函数会处理更多条件，所以一定兼容着子类的条件场景</strong></p><h3 id="为什么要有逆变协变"><a href="#为什么要有逆变协变" class="headerlink" title="为什么要有逆变协变"></a>为什么要有逆变协变</h3><p>ts是为了给js添加静态类型系统来保证类型安全，大多数情况不同类型不能赋值，但为了增加类型系统灵活性，设计了父子类型的概念，父子类型之间自然能够赋值，也就是会发生型变(逆变与协变)。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>判断父子类型，通过结构判断， 更加具体的那个是子类型</li><li>逆变协变的赋值逻辑都是后者需要兼容前者才能赋值</li></ul>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS类型体操中找到数组成员索引</title>
    <link href="/2023/04/30/typescript/TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E4%B8%AD%E6%89%BE%E5%88%B0%E6%95%B0%E7%BB%84%E6%88%90%E5%91%98%E7%B4%A2%E5%BC%95/"/>
    <url>/2023/04/30/typescript/TS%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E4%B8%AD%E6%89%BE%E5%88%B0%E6%95%B0%E7%BB%84%E6%88%90%E5%91%98%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h3 id="如何在类型体操中找到一个数组的索引"><a href="#如何在类型体操中找到一个数组的索引" class="headerlink" title="如何在类型体操中找到一个数组的索引"></a>如何在类型体操中找到一个数组的索引</h3><p>参考 <code>type-challenges</code> 中的中等题 <a href="https://github.com/type-challenges/type-challenges/tree/main/questions/05153-medium-indexof"><code>indexOf</code></a></p><h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"> <span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Equal</span>, <span class="hljs-title class_">Expect</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@type-challenges/utils&#x27;</span><br><br><span class="hljs-keyword">type</span> cases = [<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">IndexOf</span>&lt;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-number">2</span>&gt;, <span class="hljs-number">1</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">IndexOf</span>&lt;[<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>], <span class="hljs-number">3</span>&gt;, <span class="hljs-number">2</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">IndexOf</span>&lt;[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <span class="hljs-number">2</span>&gt;, -<span class="hljs-number">1</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">IndexOf</span>&lt;[<span class="hljs-built_in">string</span>, <span class="hljs-number">1</span>, <span class="hljs-built_in">number</span>, <span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-built_in">number</span>&gt;, <span class="hljs-number">2</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">IndexOf</span>&lt;[<span class="hljs-built_in">string</span>, <span class="hljs-number">1</span>, <span class="hljs-built_in">number</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-built_in">any</span>], <span class="hljs-built_in">any</span>&gt;, <span class="hljs-number">4</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">IndexOf</span>&lt;[<span class="hljs-built_in">string</span>, <span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-string">&#x27;a&#x27;</span>&gt;, <span class="hljs-number">1</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">IndexOf</span>&lt;[<span class="hljs-built_in">any</span>, <span class="hljs-number">1</span>], <span class="hljs-number">1</span>&gt;, <span class="hljs-number">1</span>&gt;&gt;,<br>]<br></code></pre></td></tr></table></figure><p>要求在元组中根据成员找到下标</p><h4 id="分析问题-解决问题"><a href="#分析问题-解决问题" class="headerlink" title="分析问题&amp;解决问题"></a>分析问题&amp;解决问题</h4><ul><li>问题的关键就在于怎么返回元组的索引</li><li>其次是判断全等</li></ul><p><strong>如何返回元组的索引呢？</strong><br>在TS类型体操中，不能直接获取到索引，所以我们的目标是遍历元组，并且存储元组，通过存储的临时元组, 通过 <code>元组[&#39;length&#39;]</code>返回的元组长度，认为是他的索引。</p><p><strong>遍历判断是否相等</strong></p><ul><li>相等则返回临时变量的长度</li><li>不相等则将剩下的成员递归，且临时变量长度+1</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">IndexOf</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[], U, <span class="hljs-title class_">Res</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span>[] = []&gt; =<br>T <span class="hljs-keyword">extends</span> [infer L, ...infer <span class="hljs-title class_">Rest</span>]<br>? U <span class="hljs-keyword">extends</span> L<br>? <span class="hljs-title class_">Res</span>[<span class="hljs-string">&#x27;length&#x27;</span>]<br>: <span class="hljs-title class_">IndexOf</span>&lt;<span class="hljs-title class_">Rest</span>, U, [L, ...<span class="hljs-title class_">Res</span>]&gt;<br>: -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这里就会出现另一个问题 <code>1 extends number</code>、<code>number extends number</code> 的问题了， 这里两个都是<code>true</code>，那么不能判断全等，也就不能正确找到下标。</p><p>先借助 <code>type-challenges</code> 函数中的 <code>Equal</code> 方法判断全等</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Equal</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@type-challenges/utils&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">IndexOf</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[], U, <span class="hljs-title class_">Res</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">any</span>[] = []&gt; =<br>T <span class="hljs-keyword">extends</span> [infer L, ...infer <span class="hljs-title class_">Rest</span>]<br>? <span class="hljs-title class_">Equal</span>&lt;U, L&gt; <span class="hljs-keyword">extends</span> <span class="hljs-literal">true</span><br>  ? <span class="hljs-title class_">Res</span>[<span class="hljs-string">&#x27;length&#x27;</span>]<br>  : <span class="hljs-title class_">IndexOf</span>&lt;<span class="hljs-title class_">Rest</span>, U, [L, ...<span class="hljs-title class_">Res</span>]&gt;<br>: -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>number 在类型体操中的运算</title>
    <link href="/2023/04/30/typescript/number%E5%9C%A8%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <url>/2023/04/30/typescript/number%E5%9C%A8%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D%E4%B8%AD%E7%9A%84%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在TS类型体操运算中有时候涉及到number类型的操作比较麻烦<br>即不能直接进行字符串操作以及加减乘除等数字运算</p></blockquote><hr><h3 id="1、转成字符串"><a href="#1、转成字符串" class="headerlink" title="1、转成字符串"></a>1、转成字符串</h3><hr><p>假如现在有个题目 <a href="https://github.com/type-challenges/type-challenges/tree/main/questions/05140-medium-trunc">trunc</a> 要求实现跟Math.trunc() 函数一样的功能，即取出数字整数部分，TS类型体操中应该怎么处理呢？</p><ul><li>了解将number类型转成string类型， 通过<code>$&#123;&#125;</code> 字符串模板转换</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 将number类型转成string</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">NumberToString</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>&gt; = <span class="hljs-string">`<span class="hljs-subst">$&#123;T&#125;</span>`</span><br><br><span class="hljs-keyword">type</span> test = <span class="hljs-title class_">NumberToString</span>&lt;<span class="hljs-number">123</span>&gt; <span class="hljs-comment">// &quot;123&quot;</span><br></code></pre></td></tr></table></figure><ul><li>通过TS推算<code>infer</code> 就可以进行拆分提取了<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 类型函数Rrunc</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Trunc</span>&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>&gt; = <br><span class="hljs-string">`<span class="hljs-subst">$&#123;T&#125;</span>`</span> <span class="hljs-keyword">extends</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;infer L&#125;</span>.<span class="hljs-subst">$&#123;infer Rest&#125;</span>`</span> <br>? L <span class="hljs-keyword">extends</span> <span class="hljs-string">&#x27;&#x27;</span> <br>  ? <span class="hljs-string">&#x27;0&#x27;</span><br>  : L<br>: <span class="hljs-string">`<span class="hljs-subst">$&#123;T&#125;</span>`</span><br><br><span class="hljs-comment">// 测试用例</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Equal</span>, <span class="hljs-title class_">Expect</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@type-challenges/utils&#x27;</span><br><br><span class="hljs-keyword">type</span> cases = [<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;<span class="hljs-number">0.1</span>&gt;, <span class="hljs-string">&#x27;0&#x27;</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;<span class="hljs-number">0.2</span>&gt;, <span class="hljs-string">&#x27;0&#x27;</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;<span class="hljs-number">1.234</span>&gt;, <span class="hljs-string">&#x27;1&#x27;</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;<span class="hljs-number">12.345</span>&gt;, <span class="hljs-string">&#x27;12&#x27;</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;-<span class="hljs-number">5.1</span>&gt;, <span class="hljs-string">&#x27;-5&#x27;</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;<span class="hljs-string">&#x27;.3&#x27;</span>&gt;, <span class="hljs-string">&#x27;0&#x27;</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;<span class="hljs-string">&#x27;1.234&#x27;</span>&gt;, <span class="hljs-string">&#x27;1&#x27;</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;<span class="hljs-string">&#x27;-10.234&#x27;</span>&gt;, <span class="hljs-string">&#x27;-10&#x27;</span>&gt;&gt;,<br>  <span class="hljs-title class_">Expect</span>&lt;<span class="hljs-title class_">Equal</span>&lt;<span class="hljs-title class_">Trunc</span>&lt;<span class="hljs-number">10</span>&gt;, <span class="hljs-string">&#x27;10&#x27;</span>&gt;&gt;,<br>]<br></code></pre></td></tr></table></figure></li></ul><h3 id="2、加法运算"><a href="#2、加法运算" class="headerlink" title="2、加法运算"></a>2、加法运算</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> <span class="hljs-title class_">BuildArray</span>&lt;<span class="hljs-title class_">Length</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>, <span class="hljs-title class_">Ele</span>  = <span class="hljs-built_in">unknown</span>, <span class="hljs-title class_">Arr</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">unknown</span>[] = []&gt; =<br>    <span class="hljs-title class_">Arr</span>[<span class="hljs-string">&#x27;length&#x27;</span>] <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Length</span><br>        ? <span class="hljs-title class_">Arr</span><br>        : <span class="hljs-title class_">BuildArray</span>&lt;<span class="hljs-title class_">Length</span>, <span class="hljs-title class_">Ele</span>, [...<span class="hljs-title class_">Arr</span>, <span class="hljs-title class_">Ele</span>]&gt;<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Add</span>&lt;<span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>, <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-built_in">number</span>&gt; = <br>    [...<span class="hljs-title class_">BuildArray</span>&lt;<span class="hljs-title class_">Num1</span>&gt;, ...<span class="hljs-title class_">BuildArray</span>&lt;<span class="hljs-title class_">Num2</span>&gt;][<span class="hljs-string">&#x27;length&#x27;</span>]<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Add2</span>&lt;<span class="hljs-title class_">Num1</span> <span class="hljs-keyword">extends</span> <span class="hljs-number">1000</span>, <span class="hljs-title class_">Num2</span> <span class="hljs-keyword">extends</span> <span class="hljs-number">1</span>&gt; = <br>    [...<span class="hljs-title class_">BuildArray</span>&lt;<span class="hljs-title class_">Num1</span>&gt;, ...<span class="hljs-title class_">BuildArray</span>&lt;<span class="hljs-title class_">Num2</span>&gt;][<span class="hljs-string">&#x27;length&#x27;</span>]<br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">AddResult1</span> = <span class="hljs-title class_">Add</span>&lt;<span class="hljs-number">999</span>, <span class="hljs-number">1</span>&gt; <span class="hljs-comment">// 1000</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">AddResult2</span> = <span class="hljs-title class_">Add</span>&lt;<span class="hljs-number">1000</span>, <span class="hljs-number">1</span>&gt; <span class="hljs-comment">// Type instantiation is excessively deep and possibly infinite: 类型深度可能是无限的 </span><br></code></pre></td></tr></table></figure><blockquote><p>ts在递归超过1000次的时候会报 深度可能是无限的错误</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
